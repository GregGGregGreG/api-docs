components:
  schemas:

    check_types_EMOJI_CONSISTENCY_settings:
      put:
        description: >-
          Apply emoji consistency settings.
        summary: Apply emoji consistency settings
        tags:
          - Translation quality check
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - $ref: '../../api_common.yaml#/components/schemas/pathParameters/accountUid'
          - name: request
            description: ''
            in: body
            required: true
            schema:
              $ref: '#/components/schemas/AccountCheckTypeApplyEmojiConsistencySettingsRequest'

        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountCheckTypeApplyEmojiConsistencySettingsResponse'

        x-code-samples:
          - lang: curl
            source: |
              curl -X PUT -H "Authorization: Bearer $smartlingToken" -d "$smartlingStringTQCJSON" -H "Content-Type: application/json" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/EMOJI_CONSISTENCY/settings:

    check_types_EMOJI_CONSISTENCY_group_settings:
      put:
        description: >-
          Apply emoji consistency group settings.
        summary: Apply emoji consistency group settings
        tags:
          - Translation quality check
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - $ref: '../../api_common.yaml#/components/schemas/pathParameters/accountUid'
          - $ref: '../tqc_common.yaml#/components/schemas/pathParameters/groupUid'
          - name: request
            description: ''
            in: body
            required: true
            schema:
              $ref: '#/components/schemas/AccountCheckTypeApplyEmojiConsistencySettingsRequest'

        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountCheckTypeApplyEmojiConsistencySettingsResponse'

        x-code-samples:
          - lang: curl
            source: |
              curl -X PUT -H "Authorization: Bearer $smartlingToken" -d "$smartlingStringTQCJSON" -H "Content-Type: application/json" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/EMOJI_CONSISTENCY/groups/{groupUid}/settings:

    account_check_types_EMOJI_CONSISTENCY_settings_effective:
      get:
        description: >-
          Get checktype EMOJI_CONSISTENCY settings for certain account.
        summary: Get checktype EMOJI_CONSISTENCY settings for certain account
        tags:
          - Translation quality check
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - $ref: '../../api_common.yaml#/components/schemas/pathParameters/accountUid'
          - $ref: '../tqc_common.yaml#/components/schemas/requestQueryParameter/targetLocaleId'

        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountCheckTypeEffectiveResponse'

        x-code-samples:
          - lang: curl
            source: |
              curl -H "Authorization: Bearer $smartlingToken" -H "Content-Type: application/json" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/check-types/EMOJI_CONSISTENCY:


    EmojiConsistencySettingsDTO:
      type: object
      properties:
        noEmojisAllowedInTarget:
          type: boolean
          description: No emoji is allowed in target
          example: false

    AccountCheckTypeApplyEmojiConsistencySettingsRequest:
      allOf:
        - $ref: '#/components/schemas/EmojiConsistencySettingsDTO'
        - $ref: '../tqc_common.yaml#/components/schemas/requestBodyParameter/targetLocaleId'
        - type: object
          required:
            - noEmojisAllowedInTarget

    AccountCheckTypeApplyEmojiConsistencySettingsResponse:
      allOf:
        - $ref: '../../api_common.yaml#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/EmojiConsistencySettingsDTO'

    AccountCheckTypeEffectiveDTO:
      allOf:
        - $ref: '../tqc_common.yaml#/components/schemas/accountCheckTypeSettingsEffectiveResponse/commonWithCustomSubTypesResponse'
        - $ref: '#/components/schemas/EmojiConsistencySettingsDTO'
        - type: object
          properties:
            checkTypeCode:
              type: string
              enum:
                - EMOJI_CONSISTENCY
              description: check type code
              example: "EMOJI_CONSISTENCY"
            subTypes:
              type: array
              items:
                type: object
                properties:
                  checkSubTypeCode:
                    type: string
                    enum:
                      - EMOJI_ADDED
                      - EMOJI_DELETED
                      - EMOJI_PRESENT
                    description: check subtype code
                    example: "EMOJI_ADDED"


    AccountCheckTypeEffectiveResponse:
      allOf:
        - $ref: '../../api_common.yaml#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: './accounts.yaml#/components/schemas/CheckTypeSettingBase'
                - $ref: '#/components/schemas/AccountCheckTypeEffectiveDTO'


    TqcCheckMistakeDTO:
      title: EMOJI_CONSISTENCY
      allOf:
        - $ref: '../tqc_common.yaml#/components/schemas/responseObjects/severityLevelCodeResponse'
        - $ref: '../tqc_common.yaml#/components/schemas/TqcCheckDTO/positions'
        - type: object
          properties:
            checkTypeCode:
              type: string
              enum:
                - EMOJI_CONSISTENCY
              description: check type code
              example: "EMOJI_CONSISTENCY"
            details:
              type: object
              properties:
                emoji:
                  type: string
                  description: emoji symbol
                  example: "ðŸ˜€"
                type:
                  type: string
                  enum:
                    - EMOJI_ADDED
                    - EMOJI_DELETED
                    - EMOJI_PRESENT
                  description: emoji defect type
                  example: "EMOJI_DELETED"
            positionTypeCode:
              type: string
              enum:
                - SOURCE
                - TARGET
              description: position type code
              example: "SOURCE"

  #{
  #    "sourceLocaleId": "en-US",
  #    "targetLocaleId": "hu-HU",
  #    "skipSuggestions": false,
  #    "excludePlaceholderWithinTag": true,
  #        "strings": [{
  #            "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
  #            "originalString": "hello ðŸ˜€",
  #            "translation": "Szia"
  #        }],
  #    "checkTypeCodes": [
  #        "EMOJI_CONSISTENCY"
  #    ]
  #}
  #
  #    EMOJI_ADDED("Emoji added", QualityCheckErrorPositionType.TARGET),
  #    EMOJI_DELETED("Emoji deleted", QualityCheckErrorPositionType.SOURCE),
  #    EMOJI_PRESENT("Emoji present", QualityCheckErrorPositionType.TARGET);

  #{
  #    "response": {
  #        "code": "SUCCESS",
  #        "data": {
  #            "results": [
  #                {
  #                    "string": {
  #                        "originalString": "hello ðŸ˜€",
  #                        "translation": "Szia",
  #                        "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
  #                        "stringUid": null
  #                    },
  #                    "mistakes": [
  #                        {
  #                            "checkTypeCode": "EMOJI_CONSISTENCY",
  #                            "severityLevelCode": "LOW",
  #                            "positions": [
  #                                {
  #                                    "from": 6,
  #                                    "to": 8
  #                                }
  #                            ],
  #                            "details": {
  #                                "emoji": "ðŸ˜€",
  #                                "type": "EMOJI_DELETED"
  #                            },
  #                            "positionTypeCode": "SOURCE"
  #                        }
  #                    ]
  #                }
  #            ]
  #        }
  #    }
  #}

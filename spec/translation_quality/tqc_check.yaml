components:
  schemas:
    tqc_check:
      post:
        description: >-
          Perform quality check.
        summary: Perform quality check
        tags:
          - Translation quality check
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - $ref: '../api_common.yaml#/definitions/pathParameters/accountUid'
          - $ref: '../api_common.yaml#/definitions/pathParameters/projectId'
          - name: request
            description: ''
            in: body
            required: true
            schema:
              allOf:
                - $ref: '#/components/schemas/TqcCheckRequest'
                - type: object
                  example:
                    "targetLocaleId": "it-IT"
                    "sourceLocaleId": "en-US"
                    "skipSuggestions": false
                    "excludePlaceholderWithinTag": true
                    "strings":
                      - "hashcode": "7191152182c69d9b72069ac1290fe24b"
                        "stringUid": ""
                        "originalString": "blacklist_term ðŸ˜€"
                        "translation": "blacklist_term"
                    "useDefaultSettings": false
                    "checkTypeCodes":
                      - "checkTypeCode": "BLACKLISTED_TERMS"
                      - "checkTypeCode": "EMOJI_CONSISTENCY"

        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TqcCheckResponse'
                example:
                  "response":
                    "code": "SUCCESS"
                    "data":
                      "results":
                        - "string":
                            "originalString": "blacklist_term ðŸ˜€"
                            "translation": "blacklist_term"
                            "hashcode": "7191152182c69d9b72069ac1290fe24b"
                            "stringUid": null
                          "mistakes":
                            - "checkTypeCode": "BLACKLISTED_TERMS"
                              "severityLevelCode": "MEDIUM"
                              "positions":
                                - "from": 0
                                  "to": 14
                              "details":
                                - "blacklistedTermUid": "uidgj1"
                                  "termText": "blacklist_term"
                                  "alternatives": []
                                  "notes": ""
                              "positionTypeCode": "TARGET"
                            - "checkTypeCode": "EMOJI_CONSISTENCY"
                              "severityLevelCode": "LOW"
                              "positions":
                                - "from": 14
                                  "to": 16
                              "details":
                                - "emoji": "ðŸ˜€"
                                  "type": "EMOJI_DELETED"
                              "positionTypeCode": "SOURCE"

        x-code-samples:
          - lang: curl
            source: |
              curl -X POST -H "Authorization: Bearer $smartlingToken" -H "Content-Type: application/json" -d "$smartlingStringTagJSON" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId//projects/$smartlingProjectId/check

    TqcCheckRequest:
      allOf:
        - $ref: './tqc_common.yaml#/definitions/requestBodyParameter/targetLocaleId'
        - $ref: '../api_common.yaml#/definitions/requestBodyParameter/sourceLocaleId'
        - type: object
          properties:
            skipSuggestions:
              type: boolean
              description: skip suggestions
              example: false
            excludePlaceholderWithinTag:
              type: boolean
              description: exclude placeholder within tag
              example: true
            strings:
              type: array
              items:
                allOf:
                  - $ref: '../api_common.yaml#/definitions/requestBodyParameter/hashcode'
                  - $ref: './tqc_common.yaml#/definitions/stringUid'
                  - $ref: './tqc_common.yaml#/definitions/originalString'
                  - $ref: './tqc_common.yaml#/definitions/translation'
            useDefaultSettings:
              type: boolean
              description: use default settings
              example: false
            checkTypeCodes:
              minItems: 1
              maxItems: 100
              type: array
              items:
                allOf:
                  - $ref: './tqc_common.yaml#/definitions/requestBodyParameter/checkTypeCode'


  #{
  #    "sourceLocaleId": "en-US",
  #    "targetLocaleId": "ru-RU",
  #    "skipSuggestions": false,
  #    "excludePlaceholderWithinTag": true,
  #        "strings": [{
  #            "hashcode": "7191152182c69d9b72069ac1290fe24b",
  #            "originalString": "blacklist_term",
  #            "translation": "blacklist_term"
  #        }],
  #    "checkTypeCodes": [
  #        "BLACKLISTED_TERMS"
  ##    private Boolean useDefaultSettings;
  #    ]
  #}

  #    @Valid
  #    private Set<@EnumValue(enumType = QualityCheckType.class) String> checkTypeCodes = new HashSet<>();
  #    @LocaleId
  #    private String sourceLocaleId;
  #    @LocaleId
  #    private String targetLocaleId;
  #    @Valid
  #    @NotEmpty
  #    @Size(max = 1000)
  #    private Collection<QualityCheckStringCommandDTO> strings = new ArrayList<>();
  #    private Boolean skipSuggestions = Boolean.FALSE;
  #    private Boolean excludePlaceholderWithinTag = Boolean.FALSE;
  #    private Boolean useDefaultSettings;

    TqcCheckResponse:
      allOf:
        - $ref: '../api_common.yaml#/definitions/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      string:
                        type: object
                        properties:
                          stringUid:
                            type: string
                            description: it is string part unique identifier if string is splitted on several parts
                            example: ""
                          originalString:
                            type: string
                            description: original string
                            example: "blacklist_term"
                          translation:
                            type: string
                            description: translation of the original string
                            example: "blacklist_term"
                          hashcode:
                            type: string
                            description: string hashcode
                            example: "7191152182c69d9b72069ac1290fe24b"
                      mistakes:
                        type: array
                        items:
                          anyOf:
                            - $ref: 'checks/blacklisted_terms.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/emoji_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/global_capitalisation_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/glossary_compliance.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/grammar_check.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/insertable_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/leading_trailing_spaces.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/non_translatable_text.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/number_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/original_equals_target.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/repeated_word.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/segment_completeness.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/source_in_wrong_language.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/spellcheck.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/tag_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/target_in_wrong_language.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/target_length_limit.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/target_source_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/trademark_consistency.yaml#/components/schemas/TqcCheckMistakeDTO'
                            - $ref: 'checks/whitespaces.yaml#/components/schemas/TqcCheckMistakeDTO'
